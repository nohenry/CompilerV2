#include<Token.hpp>
#include<Trie.hpp>
const TrieNode trie[] = {
TrieNode('!',1,3,TokenType::Not,true,true), // 0
TrieNode('<',TokenType::NotSmaller), // 1
TrieNode('=',TokenType::NotEqual), // 2
TrieNode('>',TokenType::NotBigger), // 3
TrieNode('%',5,1,TokenType::Percent,true,true), // 4
TrieNode('=',TokenType::PercentEqual), // 5
TrieNode('&',7,1,TokenType::Ampersand,true,true), // 6
TrieNode('=',TokenType::AmpersandEquals), // 7
TrieNode('(',TokenType::LeftParen,true), // 8
TrieNode(')',TokenType::RightParen,true), // 9
TrieNode('*',11,1,TokenType::Star,true,true), // 10
TrieNode('=',TokenType::StarEqual), // 11
TrieNode('+',13,2,TokenType::Plus,true,true), // 12
TrieNode('+',TokenType::DoublePlus), // 13
TrieNode('=',TokenType::PlusEqual), // 14
TrieNode(',',TokenType::Comma,true), // 15
TrieNode('-',17,2,TokenType::Minus,true,true), // 16
TrieNode('-',TokenType::DoubleMinus), // 17
TrieNode('=',TokenType::MinusEqual), // 18
TrieNode('.',TokenType::Dot,true), // 19
TrieNode('/',21,1,TokenType::ForwardSlash,true,true), // 20
TrieNode('=',TokenType::SlashEqual), // 21
TrieNode(':',TokenType::Colon,true), // 22
TrieNode(';',TokenType::Semicolon,true), // 23
TrieNode('<',25,2,TokenType::LeftAngle,true,true), // 24
TrieNode('<',26,1,TokenType::LeftShift,true,true), // 25
TrieNode('=',TokenType::LeftShiftEquals), // 26
TrieNode('=',TokenType::SmallerEqual), // 27
TrieNode('=',29,2,TokenType::Equal,true,true), // 28
TrieNode('=',TokenType::DoubleEqual), // 29
TrieNode('>',TokenType::FuncArrow), // 30
TrieNode('>',32,2,TokenType::RightAngle,true,true), // 31
TrieNode('=',TokenType::BiggerEqual), // 32
TrieNode('>',34,2,TokenType::RightShift,true,true), // 33
TrieNode('=',TokenType::RightShiftEquals), // 34
TrieNode('>',36,1,TokenType::TripleShift,true,true), // 35
TrieNode('=',TokenType::TripleShiftEquals), // 36
TrieNode('@',TokenType::At,true), // 37
TrieNode('[',TokenType::LeftSquare,true), // 38
TrieNode(']',TokenType::RightSquare,true), // 39
TrieNode('^',41,1,TokenType::Carrot,true,true), // 40
TrieNode('=',TokenType::CarrotEquals), // 41
TrieNode('a',43,2,true), // 42
TrieNode('n',44,1), // 43
TrieNode('d',TokenType::And), // 44
TrieNode('s',46,1,TokenType::As,true,true), // 45
TrieNode('m',TokenType::Asm), // 46
TrieNode('b',48,2,true), // 47
TrieNode('o',49,1), // 48
TrieNode('o',50,1), // 49
TrieNode('l',TokenType::Bool), // 50
TrieNode('r',52,1), // 51
TrieNode('a',53,1), // 52
TrieNode('n',54,1), // 53
TrieNode('c',55,1), // 54
TrieNode('h',TokenType::Branch), // 55
TrieNode('c',57,2,true), // 56
TrieNode('h',58,1), // 57
TrieNode('a',59,1), // 58
TrieNode('r',TokenType::Char), // 59
TrieNode('o',61,1), // 60
TrieNode('n',62,1), // 61
TrieNode('s',63,1), // 62
TrieNode('t',TokenType::Const), // 63
TrieNode('e',65,2,true), // 64
TrieNode('l',66,2), // 65
TrieNode('i',67,1), // 66
TrieNode('f',TokenType::Elif), // 67
TrieNode('s',69,1), // 68
TrieNode('e',TokenType::Else), // 69
TrieNode('x',71,1), // 70
TrieNode('p',72,1), // 71
TrieNode('o',73,1), // 72
TrieNode('r',74,1), // 73
TrieNode('t',TokenType::Export), // 74
TrieNode('f',76,3,true), // 75
TrieNode('a',77,1), // 76
TrieNode('l',78,1), // 77
TrieNode('s',79,1), // 78
TrieNode('e',TokenType::False), // 79
TrieNode('l',81,1), // 80
TrieNode('o',82,1), // 81
TrieNode('a',83,1), // 82
TrieNode('t',TokenType::Float), // 83
TrieNode('u',85,1), // 84
TrieNode('n',86,1), // 85
TrieNode('c',87,1), // 86
TrieNode('t',88,1), // 87
TrieNode('i',89,1), // 88
TrieNode('o',90,1), // 89
TrieNode('n',TokenType::Function), // 90
TrieNode('i',92,3,true), // 91
TrieNode('f',TokenType::If), // 92
TrieNode('m',94,1), // 93
TrieNode('p',95,1), // 94
TrieNode('o',96,1), // 95
TrieNode('r',97,1), // 96
TrieNode('t',TokenType::Import), // 97
TrieNode('n',99,1,TokenType::In,true,true), // 98
TrieNode('t',TokenType::Int), // 99
TrieNode('l',101,2,true), // 100
TrieNode('e',102,1), // 101
TrieNode('t',TokenType::Let), // 102
TrieNode('o',104,1), // 103
TrieNode('o',105,1), // 104
TrieNode('p',TokenType::Loop), // 105
TrieNode('m',107,1,true), // 106
TrieNode('o',108,1), // 107
TrieNode('d',109,1), // 108
TrieNode('u',110,1), // 109
TrieNode('l',111,1), // 110
TrieNode('e',TokenType::Module), // 111
TrieNode('n',113,1,true), // 112
TrieNode('u',114,1), // 113
TrieNode('l',115,1), // 114
TrieNode('l',TokenType::Null), // 115
TrieNode('o',117,1,true), // 116
TrieNode('r',TokenType::Or), // 117
TrieNode('p',119,1,true), // 118
TrieNode('e',120,1), // 119
TrieNode('r',121,1), // 120
TrieNode('s',122,1), // 121
TrieNode('i',123,1), // 122
TrieNode('s',124,1), // 123
TrieNode('t',TokenType::Persist), // 124
TrieNode('r',126,1,true), // 125
TrieNode('e',127,1), // 126
TrieNode('t',128,1), // 127
TrieNode('u',129,1), // 128
TrieNode('r',130,1), // 129
TrieNode('n',TokenType::Return), // 130
TrieNode('s',132,1,true), // 131
TrieNode('p',133,1), // 132
TrieNode('e',134,1), // 133
TrieNode('c',TokenType::Spec), // 134
TrieNode('t',136,3,true), // 135
TrieNode('e',137,1), // 136
TrieNode('m',138,1), // 137
TrieNode('p',139,1), // 138
TrieNode('l',140,1), // 139
TrieNode('a',141,1), // 140
TrieNode('t',142,1), // 141
TrieNode('e',TokenType::Template), // 142
TrieNode('r',144,1), // 143
TrieNode('u',145,1), // 144
TrieNode('e',TokenType::True), // 145
TrieNode('y',147,1), // 146
TrieNode('p',148,1), // 147
TrieNode('e',149,1,TokenType::Type,true,true), // 148
TrieNode('o',150,1), // 149
TrieNode('f',TokenType::Typeof), // 150
TrieNode('u',152,1,true), // 151
TrieNode('i',153,1), // 152
TrieNode('n',154,1), // 153
TrieNode('t',TokenType::Uint), // 154
TrieNode('w',156,1,true), // 155
TrieNode('h',157,1), // 156
TrieNode('e',158,1), // 157
TrieNode('n',TokenType::When), // 158
TrieNode('y',160,1,true), // 159
TrieNode('i',161,1), // 160
TrieNode('e',162,1), // 161
TrieNode('l',163,1), // 162
TrieNode('d',TokenType::Yield), // 163
TrieNode('{',TokenType::LeftCurly,true), // 164
TrieNode('|',166,1,TokenType::Pipe,true,true), // 165
TrieNode('=',TokenType::PipeEquals), // 166
TrieNode('}',TokenType::RightCurly,true), // 167
TrieNode('~',TokenType::Tilda,true), // 168
};

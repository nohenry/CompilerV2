#include<Token.hpp>
#include<Trie.hpp>
const TrieNode trie[] = {
TrieNode('!',1,3,TokenType::Not,true,true), // 0
TrieNode('<',TokenType::NotSmaller), // 1
TrieNode('=',TokenType::NotEqual), // 2
TrieNode('>',TokenType::NotBigger), // 3
TrieNode('%',5,1,TokenType::Percent,true,true), // 4
TrieNode('=',TokenType::PercentEqual), // 5
TrieNode('&',7,1,TokenType::Ampersand,true,true), // 6
TrieNode('=',TokenType::AmpersandEquals), // 7
TrieNode('(',TokenType::LeftParen,true), // 8
TrieNode(')',TokenType::RightParen,true), // 9
TrieNode('*',11,1,TokenType::Star,true,true), // 10
TrieNode('=',TokenType::StarEqual), // 11
TrieNode('+',13,2,TokenType::Plus,true,true), // 12
TrieNode('+',TokenType::DoublePlus), // 13
TrieNode('=',TokenType::PlusEqual), // 14
TrieNode(',',TokenType::Comma,true), // 15
TrieNode('-',17,2,TokenType::Minus,true,true), // 16
TrieNode('-',TokenType::DoubleMinus), // 17
TrieNode('=',TokenType::MinusEqual), // 18
TrieNode('.',TokenType::Dot,true), // 19
TrieNode('/',21,1,TokenType::ForwardSlash,true,true), // 20
TrieNode('=',TokenType::SlashEqual), // 21
TrieNode(':',TokenType::Colon,true), // 22
TrieNode(';',TokenType::Semicolon,true), // 23
TrieNode('<',25,2,TokenType::LeftAngle,true,true), // 24
TrieNode('<',26,1,TokenType::LeftShift,true,true), // 25
TrieNode('=',TokenType::LeftShiftEquals), // 26
TrieNode('=',TokenType::SmallerEqual), // 27
TrieNode('=',29,2,TokenType::Equal,true,true), // 28
TrieNode('=',TokenType::DoubleEqual), // 29
TrieNode('>',TokenType::FuncArrow), // 30
TrieNode('>',32,2,TokenType::RightAngle,true,true), // 31
TrieNode('=',TokenType::BiggerEqual), // 32
TrieNode('>',34,2,TokenType::RightShift,true,true), // 33
TrieNode('=',TokenType::RightShiftEquals), // 34
TrieNode('>',36,1,TokenType::TripleShift,true,true), // 35
TrieNode('=',TokenType::TripleShiftEquals), // 36
TrieNode('@',TokenType::At,true), // 37
TrieNode('[',TokenType::LeftSquare,true), // 38
TrieNode(']',TokenType::RightSquare,true), // 39
TrieNode('^',41,1,TokenType::Carrot,true,true), // 40
TrieNode('=',TokenType::CarrotEquals), // 41
TrieNode('a',43,3,true), // 42
TrieNode('c',44,1), // 43
TrieNode('t',45,1), // 44
TrieNode('i',46,1), // 45
TrieNode('o',47,1), // 46
TrieNode('n',TokenType::Action), // 47
TrieNode('n',49,1), // 48
TrieNode('d',TokenType::And), // 49
TrieNode('s',51,1,TokenType::As,true,true), // 50
TrieNode('m',TokenType::Asm), // 51
TrieNode('b',53,2,true), // 52
TrieNode('o',54,1), // 53
TrieNode('o',55,1), // 54
TrieNode('l',TokenType::Bool), // 55
TrieNode('r',57,1), // 56
TrieNode('a',58,1), // 57
TrieNode('n',59,1), // 58
TrieNode('c',60,1), // 59
TrieNode('h',TokenType::Branch), // 60
TrieNode('c',62,2,true), // 61
TrieNode('h',63,1), // 62
TrieNode('a',64,1), // 63
TrieNode('r',TokenType::Char), // 64
TrieNode('o',66,1), // 65
TrieNode('n',67,1), // 66
TrieNode('s',68,1), // 67
TrieNode('t',TokenType::Const), // 68
TrieNode('e',70,2,true), // 69
TrieNode('l',71,2), // 70
TrieNode('i',72,1), // 71
TrieNode('f',TokenType::Elif), // 72
TrieNode('s',74,1), // 73
TrieNode('e',TokenType::Else), // 74
TrieNode('x',76,1), // 75
TrieNode('p',77,1), // 76
TrieNode('o',78,1), // 77
TrieNode('r',79,1), // 78
TrieNode('t',TokenType::Export), // 79
TrieNode('f',81,3,true), // 80
TrieNode('a',82,1), // 81
TrieNode('l',83,1), // 82
TrieNode('s',84,1), // 83
TrieNode('e',TokenType::False), // 84
TrieNode('l',86,1), // 85
TrieNode('o',87,1), // 86
TrieNode('a',88,1), // 87
TrieNode('t',TokenType::Float), // 88
TrieNode('u',90,1), // 89
TrieNode('n',91,1), // 90
TrieNode('c',92,1), // 91
TrieNode('t',93,1), // 92
TrieNode('i',94,1), // 93
TrieNode('o',95,1), // 94
TrieNode('n',TokenType::Function), // 95
TrieNode('i',97,3,true), // 96
TrieNode('f',TokenType::If), // 97
TrieNode('m',99,1), // 98
TrieNode('p',100,1), // 99
TrieNode('o',101,1), // 100
TrieNode('r',102,1), // 101
TrieNode('t',TokenType::Import), // 102
TrieNode('n',104,1,TokenType::In,true,true), // 103
TrieNode('t',TokenType::Int), // 104
TrieNode('l',106,2,true), // 105
TrieNode('e',107,1), // 106
TrieNode('t',TokenType::Let), // 107
TrieNode('o',109,1), // 108
TrieNode('o',110,1), // 109
TrieNode('p',TokenType::Loop), // 110
TrieNode('m',112,1,true), // 111
TrieNode('o',113,1), // 112
TrieNode('d',114,1), // 113
TrieNode('u',115,1), // 114
TrieNode('l',116,1), // 115
TrieNode('e',TokenType::Module), // 116
TrieNode('n',118,1,true), // 117
TrieNode('u',119,1), // 118
TrieNode('l',120,1), // 119
TrieNode('l',TokenType::Null), // 120
TrieNode('o',122,1,true), // 121
TrieNode('r',TokenType::Or), // 122
TrieNode('p',124,1,true), // 123
TrieNode('e',125,1), // 124
TrieNode('r',126,1), // 125
TrieNode('s',127,1), // 126
TrieNode('i',128,1), // 127
TrieNode('s',129,1), // 128
TrieNode('t',TokenType::Persist), // 129
TrieNode('r',131,1,true), // 130
TrieNode('e',132,1), // 131
TrieNode('t',133,1), // 132
TrieNode('u',134,1), // 133
TrieNode('r',135,1), // 134
TrieNode('n',TokenType::Return), // 135
TrieNode('s',137,1,true), // 136
TrieNode('p',138,1), // 137
TrieNode('e',139,1), // 138
TrieNode('c',TokenType::Spec), // 139
TrieNode('t',141,3,true), // 140
TrieNode('e',142,1), // 141
TrieNode('m',143,1), // 142
TrieNode('p',144,1), // 143
TrieNode('l',145,1), // 144
TrieNode('a',146,1), // 145
TrieNode('t',147,1), // 146
TrieNode('e',TokenType::Template), // 147
TrieNode('r',149,1), // 148
TrieNode('u',150,1), // 149
TrieNode('e',TokenType::True), // 150
TrieNode('y',152,1), // 151
TrieNode('p',153,1), // 152
TrieNode('e',154,1,TokenType::Type,true,true), // 153
TrieNode('o',155,1), // 154
TrieNode('f',TokenType::Typeof), // 155
TrieNode('u',157,1,true), // 156
TrieNode('i',158,1), // 157
TrieNode('n',159,1), // 158
TrieNode('t',TokenType::Uint), // 159
TrieNode('w',161,1,true), // 160
TrieNode('h',162,1), // 161
TrieNode('e',163,1), // 162
TrieNode('n',TokenType::When), // 163
TrieNode('y',165,1,true), // 164
TrieNode('i',166,1), // 165
TrieNode('e',167,1), // 166
TrieNode('l',168,1), // 167
TrieNode('d',TokenType::Yield), // 168
TrieNode('{',TokenType::LeftCurly,true), // 169
TrieNode('|',171,1,TokenType::Pipe,true,true), // 170
TrieNode('=',TokenType::PipeEquals), // 171
TrieNode('}',TokenType::RightCurly,true), // 172
TrieNode('~',TokenType::Tilda,true), // 173
};

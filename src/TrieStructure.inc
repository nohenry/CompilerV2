#include<Token.hpp>
#include<Trie.hpp>
const TrieNode trie[] = {
TrieNode('!',1,3,TokenType::Not,true,true), // 0
TrieNode('<',TokenType::NotSmaller), // 1
TrieNode('=',TokenType::NotEqual), // 2
TrieNode('>',TokenType::NotBigger), // 3
TrieNode('%',5,1,TokenType::Percent,true,true), // 4
TrieNode('=',TokenType::PercentEqual), // 5
TrieNode('&',7,1,TokenType::Ampersand,true,true), // 6
TrieNode('=',TokenType::AmpersandEquals), // 7
TrieNode('(',TokenType::LeftParen,true), // 8
TrieNode(')',TokenType::RightParen,true), // 9
TrieNode('*',11,1,TokenType::Star,true,true), // 10
TrieNode('=',TokenType::StarEqual), // 11
TrieNode('+',13,2,TokenType::Plus,true,true), // 12
TrieNode('+',TokenType::DoublePlus), // 13
TrieNode('=',TokenType::PlusEqual), // 14
TrieNode(',',TokenType::Comma,true), // 15
TrieNode('-',17,2,TokenType::Minus,true,true), // 16
TrieNode('-',TokenType::DoubleMinus), // 17
TrieNode('=',TokenType::MinusEqual), // 18
TrieNode('.',20,1,TokenType::Dot,true,true), // 19
TrieNode('.',TokenType::Spread), // 20
TrieNode('/',22,1,TokenType::ForwardSlash,true,true), // 21
TrieNode('=',TokenType::SlashEqual), // 22
TrieNode(':',TokenType::Colon,true), // 23
TrieNode(';',TokenType::Semicolon,true), // 24
TrieNode('<',26,3,TokenType::LeftAngle,true,true), // 25
TrieNode('<',27,2,TokenType::LeftShift,true,true), // 26
TrieNode('=',TokenType::LeftShiftEquals), // 27
TrieNode('>',29,1,TokenType::TripleLeftShift,true,true), // 28
TrieNode('=',TokenType::TripleLeftShiftEquals), // 29
TrieNode('=',TokenType::SmallerEqual), // 30
TrieNode('>',32,1), // 31
TrieNode('>',33,1,TokenType::TripleRightShift,true,true), // 32
TrieNode('=',TokenType::TripleRightShiftEquals), // 33
TrieNode('=',35,2,TokenType::Equal,true,true), // 34
TrieNode('=',TokenType::DoubleEqual), // 35
TrieNode('>',TokenType::FuncArrow), // 36
TrieNode('>',38,2,TokenType::RightAngle,true,true), // 37
TrieNode('=',TokenType::BiggerEqual), // 38
TrieNode('>',40,1,TokenType::RightShift,true,true), // 39
TrieNode('=',TokenType::RightShiftEquals), // 40
TrieNode('@',TokenType::At,true), // 41
TrieNode('[',TokenType::LeftSquare,true), // 42
TrieNode(']',TokenType::RightSquare,true), // 43
TrieNode('^',45,1,TokenType::Carrot,true,true), // 44
TrieNode('=',TokenType::CarrotEquals), // 45
TrieNode('a',47,3,true), // 46
TrieNode('c',48,1), // 47
TrieNode('t',49,1), // 48
TrieNode('i',50,1), // 49
TrieNode('o',51,1), // 50
TrieNode('n',TokenType::Action), // 51
TrieNode('n',53,1), // 52
TrieNode('d',TokenType::And), // 53
TrieNode('s',55,1,TokenType::As,true,true), // 54
TrieNode('m',TokenType::Asm), // 55
TrieNode('b',57,1,true), // 56
TrieNode('o',58,1), // 57
TrieNode('o',59,1), // 58
TrieNode('l',TokenType::Bool), // 59
TrieNode('c',61,2,true), // 60
TrieNode('h',62,1), // 61
TrieNode('a',63,1), // 62
TrieNode('r',TokenType::Char), // 63
TrieNode('o',65,1), // 64
TrieNode('n',66,1), // 65
TrieNode('s',67,1), // 66
TrieNode('t',TokenType::Const), // 67
TrieNode('e',69,3,true), // 68
TrieNode('l',70,2), // 69
TrieNode('i',71,1), // 70
TrieNode('f',TokenType::Elif), // 71
TrieNode('s',73,1), // 72
TrieNode('e',TokenType::Else), // 73
TrieNode('n',75,1), // 74
TrieNode('u',76,1), // 75
TrieNode('m',TokenType::Enum), // 76
TrieNode('x',78,1), // 77
TrieNode('p',79,1), // 78
TrieNode('o',80,1), // 79
TrieNode('r',81,1), // 80
TrieNode('t',TokenType::Export), // 81
TrieNode('f',83,3,true), // 82
TrieNode('a',84,1), // 83
TrieNode('l',85,1), // 84
TrieNode('s',86,1), // 85
TrieNode('e',TokenType::False), // 86
TrieNode('l',88,1), // 87
TrieNode('o',89,1), // 88
TrieNode('a',90,1), // 89
TrieNode('t',TokenType::Float), // 90
TrieNode('u',92,1), // 91
TrieNode('n',93,1), // 92
TrieNode('c',94,1), // 93
TrieNode('t',95,1), // 94
TrieNode('i',96,1), // 95
TrieNode('o',97,1), // 96
TrieNode('n',TokenType::Function), // 97
TrieNode('i',99,3,true), // 98
TrieNode('f',TokenType::If), // 99
TrieNode('m',101,1), // 100
TrieNode('p',102,1), // 101
TrieNode('o',103,1), // 102
TrieNode('r',104,1), // 103
TrieNode('t',TokenType::Import), // 104
TrieNode('n',106,1,TokenType::In,true,true), // 105
TrieNode('t',TokenType::Int), // 106
TrieNode('l',108,2,true), // 107
TrieNode('e',109,1), // 108
TrieNode('t',TokenType::Let), // 109
TrieNode('o',111,1), // 110
TrieNode('o',112,1), // 111
TrieNode('p',TokenType::Loop), // 112
TrieNode('m',114,2,true), // 113
TrieNode('a',115,1), // 114
TrieNode('t',116,1), // 115
TrieNode('c',117,1), // 116
TrieNode('h',TokenType::Match), // 117
TrieNode('o',119,1), // 118
TrieNode('d',120,1), // 119
TrieNode('u',121,1), // 120
TrieNode('l',122,1), // 121
TrieNode('e',TokenType::Module), // 122
TrieNode('n',124,1,true), // 123
TrieNode('u',125,1), // 124
TrieNode('l',126,1), // 125
TrieNode('l',TokenType::Null), // 126
TrieNode('o',128,1,true), // 127
TrieNode('r',TokenType::Or), // 128
TrieNode('p',130,1,true), // 129
TrieNode('e',131,1), // 130
TrieNode('r',132,1), // 131
TrieNode('s',133,1), // 132
TrieNode('i',134,1), // 133
TrieNode('s',135,1), // 134
TrieNode('t',TokenType::Persist), // 135
TrieNode('r',137,1,true), // 136
TrieNode('e',138,1), // 137
TrieNode('t',139,1), // 138
TrieNode('u',140,1), // 139
TrieNode('r',141,1), // 140
TrieNode('n',TokenType::Return), // 141
TrieNode('s',143,1,true), // 142
TrieNode('p',144,1), // 143
TrieNode('e',145,1), // 144
TrieNode('c',TokenType::Spec), // 145
TrieNode('t',147,3,true), // 146
TrieNode('e',148,1), // 147
TrieNode('m',149,1), // 148
TrieNode('p',150,1), // 149
TrieNode('l',151,1), // 150
TrieNode('a',152,1), // 151
TrieNode('t',153,1), // 152
TrieNode('e',TokenType::Template), // 153
TrieNode('r',155,1), // 154
TrieNode('u',156,1), // 155
TrieNode('e',TokenType::True), // 156
TrieNode('y',158,1), // 157
TrieNode('p',159,1), // 158
TrieNode('e',160,1,TokenType::Type,true,true), // 159
TrieNode('o',161,1), // 160
TrieNode('f',TokenType::Typeof), // 161
TrieNode('u',163,1,true), // 162
TrieNode('i',164,1), // 163
TrieNode('n',165,1), // 164
TrieNode('t',TokenType::Uint), // 165
TrieNode('w',167,1,true), // 166
TrieNode('h',168,1), // 167
TrieNode('e',169,1), // 168
TrieNode('n',TokenType::When), // 169
TrieNode('y',171,1,true), // 170
TrieNode('i',172,1), // 171
TrieNode('e',173,1), // 172
TrieNode('l',174,1), // 173
TrieNode('d',TokenType::Yield), // 174
TrieNode('{',TokenType::LeftCurly,true), // 175
TrieNode('|',177,1,TokenType::Pipe,true,true), // 176
TrieNode('=',TokenType::PipeEquals), // 177
TrieNode('}',TokenType::RightCurly,true), // 178
TrieNode('~',TokenType::Tilda,true), // 179
};
